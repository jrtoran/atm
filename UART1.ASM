

; RUTINA PARA LA TRANSMISION DE DATOS A TRAVES DE LA UART ENVIA LA CADENA AL LOLIN
; CONFIGURAR A 9600 EN UBRRH Y UBRRL VALORES 00 Y 33

;		fOSC
;UBRR= _________ - 1  EJEMPLO UBRR =(8.000.000 /16X 9600) -1  ESTO DA 51 PERO FUNCIONA CON 54, 47 PARA CUARZO DE 7.3728
;		16 BAUD
; TABLA DE VALORES Y ERRORES PAG 168 Y SIGUIENTES


;UART_INI1:  			;BAUDIOS A 9600
		LDI			R25, 00
		STS			UBRR1H, R25
		LDI			R25, 52
		STS			UBRR1L, R25

;						UCSRnA
;		Bit 7 	6 	5 		4 	3 	2 	1 	0
;			RXC	TXC	UDRE	FE	DOR PE 	U2X MPCM

; CONFIGURAR 8 BIT 1 STOP NO PARIDAD Y ASINCRONO EN UCSRB
;BIT 7 RXC: Recepción completa del USART.
;BIT 6 TXC: Transmisión completa del USART.
;BIT 5 UDRE: Registro de datos vacío del USART.
;BIT 4 FE: Error de frame.
;BIT 3 DOR: Datos sobre-escritos.
;BIT 2 PE: Error de paridad.
;BIT 1 U2X: Velocidad de transmisión doble.
;BIT 0 MPCM: Modo de comunicación multiprocesador.

		LDI			R25, 00
		STS			UCSR1A, R25


;							UCSRnB:
;		Bit 	7 	6 	5 	4 	3 	2 	1 	0
;			RXCIE 	TXCIE 	UDRIE 	RXEN 	TXEN 	UCSZ2 	RXB8 	TXB8
;RXCIE: Habilitación de interrupción de RX Completa.
;TXCIE: Habilitación de interrupción de TX Completa.
;UDRIE: Habilitación de interrupción de Registro de Datos Vacío del USART.
;RXEN: Habilitación de Receptor.
;TXEN: Habilitación de Transmisor.
;UCSZ2: Tamaño del carácter. 0 8 BIT, 1 9 BIT
;RXB8: Bit 8 de datos de Recepción (En el caso que haya sido configurado a 8 bits).
;TXB8: Bit 8 de datos de Transmisión (En el caso que haya sido configurado a 8 bits).

		LDI			R25,(1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1); ACTIVA TRANSMISION Y RECEPCION E INTERRUPCION EN RECEPCION
		STS			UCSR1B, R25

;UCSRnC:
;		Bit 	7 	6 			5 		4 		3 		2 		1 		0
;			URSEL 	UMSEL 	UPM1 	UPM0 	USBS 	UCSZ1 	UCSZ0 	UCPOL

;URSEL: Registro de Selección. Con 1 se escribe en UCSRC y con 0 en UBRRH (UCSRC y UBRRH tienen la misma dirección).
;UMSEL: Selección del moodo USART, 1 síncrona y 0 asíncrona.
;UPM1:0. Modo de paridad.
;USBS: Selección del bit de Stop, 1 dos bits y 0 un bit.
;Seleccionando tamaño del carácter:
;UCPOL: Polaridad del reloj (Obviamente solo en modo síncrono), 1 flanco ascendente y 0 flanco descendente.

		LDI			R25, 0b00000110		; modo asincrono sin bit de paridad y 1 bit de parada
;		LDI			R25,(0<<USBS1)|(1<<UCSZ01)
		STS			UCSR1C, R25
		RCALL		UART_TXC2			; VERIFICA SI ESTA OCUPADO EL PUERTO UART
		RET
; 	TERMINA INICIALIZACION UART1********************************************************************************************

; 	ALAMCENA LOS DATOS RECIBIDOS EN RAM************************************************************************************

DATOS_RS232_1:



		CPI			R18,113			; COMPRUEBA SI ES EL CARACTER 0x71 113 EN DECIMAL LO GRABA EN 0xC01
;		CPI			R18,35			; COMPRUEBA SI ES EL CARACTER 0x23 35 EN DECIMAL LO GRABA EN 0xC01 ALMOHADILLA ######
		BRNE		DATOS_RS232_1_B	; SI ES DISTINTO VA A DATOS_RS232_1_A
		LDI			YH,0x0C			; CARGA EL BIT ALTO
		LDI			YL,0x01			; CARGA EL BIT BAJO CON EL VALOR GRABADO EN RAM
		ST			Y,R18			; GRABA EN RAM EL VALOR DE R18
		INC			YL				; INCREMENTA EL VALOR CON LA NUEVA POSICION A GRABAR EN RAM
		STS			0xC00,YL
		RET

DATOS_RS232_1_A:		; COMPRUEBA SI ES FF CARACTER FINAL ENVIADO POR NEXTION
		CPI			R18,0xFF		; 
		BRNE		DATOS_RS232_1_B	; SI ES DISTINTO GRABA EL VALOR RECIBIDO
		CLR			YL				; PONE A CERO INICIO LA POSICION DE GRABADO EN RAM
		STS			0xC00,YL
		RET

DATOS_RS232_1_B:		; CARACTER VALIDO LO GRABA EN RAM		********* LO GRABA EN 0xC02 o 0XC03 ********

	CPI				R18,45
	BRBC			1,DATOS_RS232_1_C				; SI ES DISTINTO SALTA A RELIJ1B
	LDI				R18,1
	RJMP			DATOS_RS232_1_D
DATOS_RS232_1_C:
	CPI				R18,43
	BRBC			1,DATOS_RS232_1_D					; SI ES DISTINTO SALTA A RELIJ1B
	LDI				R18,00
DATOS_RS232_1_D:

		LDI			YH,0x0C			; CARGA EL BIT ALTO
		LDS			YL,0xC00		; CARGA EL BIT BAJO CON EL VALOR GRABADO EN RAM
		ST			Y,R18			; GRABA EN RAM EL VALOR DE R18
		INC			YL				; INCREMENTAEL VALOR CON LA NUEVA POSICION A GRABAR EN RAM
		STS			0xC00,YL
		RET


; 	LEE LOS DATOS RECIBIDOS DEL WIFI ***************************************************************************************
;RS_RET_S:
;JMP	RS_FIN

; 							SALVA LOS REGISTROS A USAR*********************************
BIT_REC_1:

		PUSH		R16
		PUSH		R17
		PUSH		R18
		PUSH		R19
		PUSH		R24
		IN			R16,SREG			; SALVA EL REGISTRO DE ESTADO
		PUSH		R16

;							ESPERA A RECIBIR EL PRIMER DATO****************************
BIT_REC_11:
		LDS			R16,UCSR1A
		SBRS		R16,RXC1
		RJMP		BIT_REC_11			; ESPERA A RECIBIR EL VALOR
		LDS			R18,UDR1
		CALL		DATOS_RS232_1
;							RECUPERA LOS REGISTROS USADOS *****************************
		POP			R16
		OUT			SREG,R16
		POP			R24
		POP			R19
		POP			R18
		POP			R17
		POP			R16
		LDI			R25, 00
		STS			UCSR1A, R25
CALL DATO_ASCI									;   SOLO PARA DEPURACION LUEGO ELIMINAR ?????????????????????????????????????????????
		RET

;  *************************************************************************************************************************************
;  TERMINA LA INTERRUPCION ALMACENANDO LOS 3 DATOS RECIBIDOS EN RG_232   +1 Y +2  DESPUES DE LEERLO EN LEC_TEC HAY QUE PONER RG_232+1 A 0xFF


UART_TXC_FLASH1:
; ENVIAR TEXTO DE FLASH
    	LDI   		ZH,high(TEXTO*5)	; direccion alta del TEXTO en Flash
		LDI   		ZL,low(TEXTO*5) 	; direccion baja del TEXTO en Flash 
		LDI   		R16,20     		; longitud de texto a TRANSMITIR
		LDI			R17, 1			; NUMERO DE LINEAS A ENVIAR
UART_TXC_2:
		LPM      					; leemos TEXTO de FLASH y lo almacena en R0
		ADIW  		ZL,1   			; apuntamos al siguiente elemento 
		STS 		UDR1,R0			; pone el valor de dato en el registro de transmision
		RCALL		UART_TXC2		; RUTINA PARA VERIFICAR EL FIN DEL ENVIO DEL DATO
		DEC   		R16      		; Hemos terminado..?? 
		BRNE  		UART_TXC_2 		; NO...seguimos cargando 
; ENVIAR RETARNO DE CARRO Y LINEA NUEVA
		LDI			R16, 10			; AQUI ENVIA UN RETARNO DE CARRO NUEVA LINEA
		STS			UDR1, R16
		RCALL		UART_TXC2
		LDI			R16, 13			; AQUI ENVIA UN RETARNO DE CARRO NUEVA LINEA
		STS			UDR1, R16
		RCALL		UART_TXC2
		LDI			R16,16
		DEC   		R17      		; Hemos terminado..?? 
		BRNE  		UART_TXC_2  		; NO...seguimos cargando 
		RET
        
UART_TXC2:  ; Rutina verificacion del termino en al envio de un bit BUFER VACIO
		LDS			R24,UCSR1A
		SBRS		R24,UDRE1		; VERIFICA EL ENVIO DE LOS BITS BUFER VACIO
		RJMP		UART_TXC2		; EN CUYO CASO SALTA ESTA INSTRUCION
		RET

; ENVIAR TEXTO DE RAM: ANTES INDICAR DIRECION A LEER EN RAM (YH,high  E  YL,low)
UART_TXC_RAM2:
		LDI   		R16,20     		; longitud de texto a TRANSMITIR
		RCALL		UART_TXC2		; VERIFICA SI ESTA OCUPADO EL PUERTO UART
;		LDI			R17,1			; NUMERO DE LINEAS A ENVIAR
UART_TXC_RAM_2A:
    	LD			R0,Y+
ADD	R8,R0						; CONTROL DEL CHECKSUM
		STS 		UDR1,R0			; pone el valor de dato en el registro de transmision
		RCALL		UART_TXC2		; RUTINA PARA VERIFICAR EL FIN DEL ENVIO DEL DATO
		DEC   		R16      		; Hemos terminado..?? 
		BRNE  		UART_TXC_RAM_2A	; NO...seguimos cargando 
RET

; ENVIAR RETORNO DE CARRO Y LINEA NUEVA
		LDI			R16,10			; AQUI ENVIA UN SALTO DE LINEA NUEVA LINEA
		STS			UDR1,R16
		RCALL		UART_TXC2
		LDI			R16,13			; AQUI ENVIA UN RETORNO DE CARRO NUEVA LINEA
		STS			UDR1,R16
		RCALL		UART_TXC2		; RUTINA PARA VERIFICAR EL FIN DEL ENVIO DEL DATO
		LDI			R16,20
		DEC   		R17      		; Hemos terminado..?? 
		BRNE  		UART_TXC_RAM_2A	; NO...seguimos cargando 
		RET
; ENVIAR SOLO UN DATO AL PUERTO UAR VALOR A ENVIAR EN R16
UART_TXC_3:
		STS 		UDR1,R16		; pone el valor de dato en el registro de transmision
		ADD			R8,R16			; suma al control chekchun
		RCALL		UART_TXC2		; RUTINA PARA VERIFICAR EL FIN DEL ENVIO DEL DATO	
		RET


; GENERAR LA CADENA A ENVIAR POR UART PRIMER DATO $

CADENA_UART:
		LDI			R16,36				; ENVIA EL SIMBOLO $
		CALL		UART_TXC_3			; RUTINA ENVIA UN BIT EL BIT EN R16	
; EMPIEZO EL CONTROL CHECKSUM

CLR 	R8							; R8 CHECHSUM
CLR		R0							; R0 ES UTILIZADO PARA TRANSMITIR LA RAM
; ENVIA LA LINEA DEL MODELO

		LDI			YH,HIGH(LIN1P-2)
		LDI			YL,LOW(LIN1P-2)
		CALL		UART_TXC_RAM2		; ENVIA UNA LINEA DE 20 CARACTERES

;	PRODUCCION								; POSICION 22 - $16

		LDS			R16,$205			; ENVIA LA PRODUCCION
		CALL		UART_TXC_3			; RUTINA ENVIA UN BIT EL BIT EN R16	

;	PH PROGRAMADO							; POSICION 23 - $17

		LDS			R16,$201			; ENVIA EL PH PROGRAMADO
		CALL		UART_TXC_3			; RUTINA ENVIA UN BIT EL BIT EN R16			

;	PH REAL									; POSICION 24 - $18
											; ENVIA FF SI NO TIENE SONDA
		
		LDI			R16,$FF
		BST			CONTROL,4			; PONE EL BIT DETECTOR DE SANDA DE PH EN T
		BRTC		PH_A				; SI T ES CERO VA A PH_A NO TIENE SONDA
		LDS			R16,$200			; ENVIA EL PH REAL
PH_A:
		CALL		UART_TXC_3			; RUTINA ENVIA UN BIT EL BIT EN R16			

;	CONCENTRACION DE SAL					; POSICION 25 - $19
		
		LDS			R16,SAL_UART		; ENVIA LA CONCENTRACION DE SAL
		CALL		UART_TXC_3			; RUTINA ENVIA UN BIT EL BIT EN R16			

;	REDOX PROGRAMADO						; POSICION 26 - $1A
			
		LDS			R16,RAMP_RD			; ENVIA EL REDOX PROGRAMADO
		CALL		UART_TXC_3			; RUTINA ENVIA UN BIT EL BIT EN R16			

;	REDOX REAL								; POSICION 27 - $1B

		LDI			R16,$FF
		BST			CONTROL,6			; PONE EL BIT DETECTOR DE SANDA DE REDOX EN T
		BRTC		RD_A				; SI T ES CERO VA A PH_A NO TIENE SONDA
		LDS			R16,REDOX_REAL		; ENVIA REDOX REAL
RD_A:
		CALL		UART_TXC_3			; RUTINA ENVIA UN BIT EL BIT EN R16			

;	CLORO PROGRAMADO						; POSICION 28 - $1C
		
		LDS			R16,$207			; ENVIA CLORO PROGRAMADO
		CALL		UART_TXC_3			; RUTINA ENVIA UN BIT EL BIT EN R16			

;	CLORO REAL								; POSICION 29 - $1D

		LDI			R16,$FF
		BST			CONTROL,7			; PONE EL BIT DETECTOR DE SANDA DE REDOX EN T
		BRTC		CL_A				; SI T ES CERO VA A PH_A NO TIENE SONDA
		LDS			R16,$206			; ENVIA REDOX REAL
CL_A:
		CALL		UART_TXC_3			; RUTINA ENVIA UN BIT EL BIT EN R16			

;	CICLOS									; POSICION 30 - $1E
		
		LDS			R16,$214			; ENVIA CICLOS PARA LA INVERSION
		CALL		UART_TXC_3			; RUTINA ENVIA UN BIT EL BIT EN R16			

; HORAS DE FUNCIONAMIENTO					; POSICION 31 - $1F

		LDI			R17,$4A				; PARTE ALTA X256 LEE DE LA EPROM
		CALL		EEPROM_RW
		MOV			R16,R18				; ENVIA HORAS DE FUNCIONAMIENTO
		CALL		UART_TXC_3			; RUTINA ENVIA UN BIT EL BIT EN R16		

; HORAS DE FUNCIONAMIENTO					; POSICION 32 - $20

		LDI			R17,$49				; PARTE BAJA
		CALL		EEPROM_RW
		MOV			R16,R18				; ENVIA HORAS DE FUNCIONAMIENTO
		CALL		UART_TXC_3			; RUTINA ENVIA UN BIT EL BIT EN R16	

;	VIDA DEL ELECTRODO						; POSICION 33 - $21

		LDI			R17,$9C
		CALL		EEPROM_RW
		MOV			R16,R18	
		CALL		UART_TXC_3			; RUTINA ENVIA UN BIT EL BIT EN R16		

;	LED  									; POSICION 34 - $22
		
		MOV			R16,VAL_LED			; ENVIA LOS DATOS DE LOS LED
		CALL		UART_TXC_3			; RUTINA ENVIA UN BIT EL BIT EN R16		

;  TEMPERATURA								; POSICION 35 - $23
											; PONE FF SI ES MENOR DE 5 GRADOS
		
		LDS			R16,RAM_TEMP		; LEE LA TEMPERARURA DE LA RAM
		LDI			R18,5				; TEMPERATURA MINIMA PARA PONER FF
		CP			R18,R16					
		BRLT		TEMP_A				; PRIMERO MENOR QUE SEGUNDA VA A
		LDI			R16,$FF
TEMP_A:
		CALL		UART_TXC_3			; RUTINA ENVIA UN BIT EL BIT EN R16	

; SONDA DE FLUJO O CAUDAL					; POSICION 36 - $24 1 ES SI 0 ES NO
;LDI	R16,15								; POSICION 15 ENVIA UNA F							;
;		CALL		UART_TXC_3			; RUTINA ENVIA UN BIT EL BIT EN R16			
;		LDS			R16,FLUJO			; POSICION EN RAM B04 EN RAM B04
LDI R16,00
		SBRS		CONTROL_1,6
		LDI			R16,1				; UN CERO SIN SONDA UN 1 CON SONDA
		CALL		UART_TXC_3			; RUTINA ENVIA UN BIT EL BIT EN R16		

; RESERVADO									; POSICION 37 - $25					
		
		LDI			R16,$FF
		CALL		UART_TXC_3			; RUTINA ENVIA UN BIT EL BIT EN R16		

;	EN ESPERA								; POSICION 38 - $26
		
		LDS			R16,ESPERA_ERROR	; POSICION EN RAM 0XB03
		CALL		UART_TXC_3			; RUTINA ENVIA UN BIT EL BIT EN R16		

;EN ESPERA 240 SEGUNDOS						; POSICION 39 - $27
		
		MOV			R16,R19				; ENVIA UN CERO 0 UN 1
		CALL		UART_TXC_3			; RUTINA ENVIA UN BIT EL BIT EN R16		

; FLUJO SI O NO								; POSICION 40 - $28
		
;		LDS			R16,S_FLUJO			; ENVIA B0A
LDI		R16,1
		CALL		UART_TXC_3			; RUTINA ENVIA UN BIT EL BIT EN R16		

;	APOYO DE CLORO Y REDOX					; POSICION 41 - $29
		
		LDS			R16,APOYO_CL		; ENVIA LA POSICION B05
		CALL		UART_TXC_3			; RUTINA ENVIA UN BIT EL BIT EN R16		

; RESERVADO									; POSICION 42 - $2A
		
		LDI			R16,$FF				; ENVIA FF
		CALL		UART_TXC_3

;	BAJO EN SAL								; POSICION 43 - $2B
		
		LDS			R16,BAJO_SAL		; ENVIA LA POSICION B06
		CALL		UART_TXC_3

;	ERROR DE CONEXION						; POSICION 44 - $2C
		
		LDS			R16,ERROR_ELECTRODO	; ENVIA LA POSICION B07
		CALL		UART_TXC_3

;	AVERIA FUENTE GRANDE					; POSICION 45 - $2D
		
		LDS		R16,AVERIA_FUENTE	; ENVIA LA POSICION B08
		CALL		UART_TXC_3

;	AVERIA MOS-FET							; POSICION 46 - $2E

		LDS		R16,AVERIA_CPU		; ENVIA LA POSICION B09
		CALL		UART_TXC_3

;	RESERVADO								; POSICION 47 - $2F
		
		LDI			R16,$FF				; ENVIA UN CERO 0 UN UNO
		CALL		UART_TXC_3

; CHECKSUM									; POSICION 48 - $30

		MOV			R16,R8				; ENVIA CHECKSUM
		CALL		UART_TXC_3

RET		
		
		
		
		
			
