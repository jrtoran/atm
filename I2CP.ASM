;RUTINAS I2C


; RELOJ DS1307
DS1307_L:		; RUTINA PARA LEER 	

	LDI			R21, 0B11010000 ; ORDEN DE ESCRITURA
	RCALL		I2C				; ENVIAR LA SE헤L DE START E IDENTIFICACION PERIFERICO EN R21
	RCALL		ACK

	LDI			R21, 0B00000000 ; DIRECION DE ESCRITURA
	RCALL		ENV_BYT				; ENVIAR LA SE헤L DE START E IDENTIFICACION PERIFERICO EN R21
	RCALL		ACK

	LDI			R21, 0B11010001 ; ORDEN DE LECTRURA
	RCALL		I2C				; ENVIAR LA SE헤L DE START E IDENTIFICACION PERIFERICO EN R21
	RCALL		ACK

	RCALL		REC_BYT			; RECIBIR DATO
	RCALL		ENV_ACK
	RCALL		DS1307_A
	STS			R_SEG,REC_DATOS	; ALMACENA LOS SEGUNDOS

	RCALL		REC_BYT			; RECIBIR DATO
	RCALL		ENV_ACK
	RCALL		DS1307_A
	STS			R_MIN,REC_DATOS	; ALMACENA LOS MINUTOS

	RCALL		REC_BYT			; RECIBIR DATO
	RCALL		ENV_ACK
	RCALL		DS1307_A
	STS			R_HOR,REC_DATOS	; ALMACENA LAS HORAS

	RCALL		REC_BYT			; RECIBIR DATO
	RCALL		ENV_ACK
	STS			R_DIA,REC_DATOS	; ALMACENA EL DIA DE LA SEMANA
; OJO VERIFICAR DUPLICIDAD DE DIA
	RCALL		REC_BYT			; RECIBIR DATO
	RCALL		ENV_ACK
	RCALL		DS1307_A
	STS			R_MES,REC_DATOS	; ALMACENA EL MES DEL A헲

	RCALL		REC_BYT			; RECIBIR DATO
	RCALL		ENV_ACK
	RCALL		DS1307_A
	STS			R_ANO,REC_DATOS	; ALMACENA EL A헲

	RCALL		REC_BYT			; RECIBIR DATO
	RCALL		ACK
	RCALL		DS1307_A
	STS			R_OTRO,REC_DATOS	; ALMACENA EL A헲

	RCALL 		I2CS			; ENVIAR SE헤L DE STOP

	RET
DS1307_A:
	MOV			R24, REC_DATOS
	SWAP		REC_DATOS
	ANDI		R24, 0B00001111
	ANDI		REC_DATOS, 0B00001111
	LDI			R25,10
	MUL			REC_DATOS, R25
	MOV			REC_DATOS, R0
	ADD			REC_DATOS, R24
	RET


DS1307_E:		; RUTINA PARA ESCRIBIR
	LDI			R21, 0B11010000 ; ORDEN DE ESCRITURA
	RCALL		I2C				; ENVIAR LA SE헤L DE START E IDENTIFICACION PERIFERICO EN R21
	RCALL		ACK

	LDI   		R21, 00			; ENVIAR DIRECION A ESCRIBIR 00
	RCALL 		ENV_BYT
	RCALL		ACK

	LDS			R21, R_SEG
	RCALL 		ENV_BYT
	RCALL		ACK

	LDS			R21, R_MIN
	RCALL 		ENV_BYT
	RCALL		ACK

	LDS			R21, R_HOR
	RCALL 		ENV_BYT
	RCALL		ACK

	LDS			R21, R_DIA
	RCALL 		ENV_BYT
	RCALL		ACK

	LDS			R21, R_DIA
	RCALL 		ENV_BYT
	RCALL		ACK

	LDS			R21, R_MES
	RCALL 		ENV_BYT
	RCALL		ACK

	LDS			R21, R_ANO
	RCALL 		ENV_BYT
	RCALL		ACK

	RCALL 		I2CS			; ENVIAR SE헤L DE STOP
	RET

; RUTINA PARA LEER UN BYTE el ultimo bit el de lectura a 1  FUNCIONA 8 PULSADORES
I2CL_8574: ;ESTE PERIFERICO NO NECESITA DIRECION DE MEMORIA A LEER DEVUELVE EL VALOR EN REC_BYT

	LDI			R21, 0B01000001	; BIT LOCALIZACION PERIFERICO 10100000 Y DIRECION, LECTURA O ESCRITURA
	RCALL 		I2C				; ENVIAR LA SE헤L DE START E IDENTIFICACION PERIFERICO EN R21
	RCALL		ACK
	RCALL		REC_BYT
	RCALL 		I2CS			; ENVIAR SE헤L DE STOP
	MOV			R18, REC_DATOS	; ALMECENA EL VALOR LEIDO EN R18
	RET

I2CE_8574: ;ESTE PERIFERICO NO NECESITA DIRECION DE MEMORIA A LEER DEVUELVE EL VALOR EN REC_BYT

	LDI			R21, 0B01000000	; BIT LOCALIZACION PERIFERICO 10100000 Y DIRECION, LECTURA O ESCRITURA
	RCALL 		I2C				; ENVIAR LA SE헤L DE START E IDENTIFICACION PERIFERICO EN R21
	RCALL		ACK
	LDI			R21, 0B10101010
	RCALL		ENV_BYT
	RCALL		ACK
	RCALL 		I2CS			; ENVIAR SE헤L DE STOP
	RET




I2CL_8583:  ;RELOJ Y RAM     FUNCIONA
; EN R21 DIRECION DEL PERIFERICO EN R5 POSICION A LEER RESULTADO EN REC_DATOS
;Secuencia de lectura
; identificar periferico con orden de escribir la direcion a leer
; enviar direcion a leer
; enviar identificacion de periferico con orden de leer
; recibir dato

	LDI			R21, 0B10100010	; BIT LOCALIZACION PERIFERICO 10100000 Y DIRECION, LECTURA O ESCRITURA
	RCALL 		I2C				; ENVIAR LA SE헤L DE START E IDENTIFICACION PERIFERICO EN R21
	RCALL		ACK
	MOV   		R21, R18		; ENVIAR DIRECION A LEER
	RCALL 		ENV_BYT
	RCALL		ACK
	LDI			R21, 0B10100011	; ORDEN DE LECTURA
	RCALL 		I2C
	RCALL		ACK
	RCALL		REC_BYT			; RECIBIR DATO
	RCALL		ACK
	RCALL 		I2CS			; ENVIAR SE헤L DE STOP
	MOV			R18, REC_DATOS	; ALMECENA EL VALOR LEIDO EN R18
	RET

I2CL_8591:  ;CONVERSOR ANALOGICO DIGITAL EN R18 POSICION A LEER 0-1-2-3
			; EN R21 DIRECION DEL PERIFERICO

	RCALL 		I2C				; ENVIAR LA SE헤L DE START E IDENTIFICACION PERIFERICO EN R21
	RCALL		ACK
;      DIRECION DE MEMORIA A LEER EN R5 
	MOV   		R21, R18		; ENVIAR DIRECION A LEER 0-1-2-3
	RCALL 		ENV_BYT
	RCALL		ACK
	RCALL		I2CS
I2CL_8591A:
	RCALL 		I2C				; ENVIAR LA SE헤L DE START E IDENTIFICACION PERIFERICO EN R21
	RCALL		ACK
	RCALL		REC_BYT			; RECIBIR DATO
	RCALL		ACK
	RCALL 		I2CS			; ENVIAR SE헤L DE STOP
	RET	     

I2CL_8591DA:  ;CONVERSOR  DIGITAL ANALOGICO EB R18 EL VALOR DE LA TENSION DE SALIDA
; EN R21 DIRECION DEL PERIFERICO YA FUNCIONA
;LDI  R18, 200	; TENSION DE SALIDA DEL CONVERTIDOR DIGITAL ANALOGICO
	LDI			R21, 0B10011110	; BIT LOCALIZACION PERIFERICO 10100000 Y DIRECION, LECTURA O ESCRITURA
	RCALL 		I2C				; ENVIAR LA SE헤L DE START E IDENTIFICACION PERIFERICO EN R21
	RCALL		ACK
;      DIRECION DE MEMORIA A LEER EN R5
	LDI			R21, 64			; ENVIAR DIRECION A LEER
	RCALL 		ENV_BYT
	MOV			R21, R18
	RCALL		ACK
	RCALL		ENV_BYT			; ENVIAR VALOR DE LA TENSION DE SALIDA
	RCALL		ACK
	RCALL 		I2CS			; ENVIAR SE헤L DE STOP
	MOV			R18, REC_DATOS	; ALMECENA EL VALOR LEIDO EN R18
	RET	     
; MEMORIA EEPROM
I2CL_2404: 	; EN R17 DIRECION A LEER  16 CARACTERES Y ..
			; EN  RESULTADO EN RAM DIRECION $03x50
	WDR
	LDI			R21, 0B10100000	; BIT LOCALIZACION PERIFERICO 10100000 Y DIRECION, LECTURA O ESCRITURA
	RCALL 		I2C				; ENVIAR LA SE헤L DE START E IDENTIFICACION PERIFERICO EN R21
	RCALL		ACK

	MOV   		R21, R17		; ENVIAR DIRECION A LEER
	RCALL 		ENV_BYT
	RCALL		ACK

	LDI			R21, 0B1010000+R; ORDEN DE LECTURA
	RCALL 		I2C
	RCALL		ACK
   	LDI   		YH,0x03        	; direcion alta donde se pone el texto en RAM
    LDI   		YL,0x50      	; direccion baja donde se pone el texto en RAM 
	LDI			R24, 15			; CANTIDAD A LEER - 1

I2CL_2404_A:
	RCALL		REC_BYT			; RECIBIR DATO
	ST			Y, REC_DATOS	; ALMECENA EL VALOR LEIDO EN RAM
	RCALL		ENV_ACK
	ADIW  		YL,1    
	DEC   		R24      		; Hemos terminado..?? 
	BRNE  		I2CL_2404_A   	; NO...seguimos cargando 
; ULTIMO DATO NO ACK
	RCALL		REC_BYT			; RECIBIR DATO
	ST			Y, REC_DATOS	; ALMECENA EL VALOR LEIDO EN RAM
	RCALL		ACK


	RCALL 		I2CS			; ENVIAR SE헤L DE STOP

	SBI   		PORTB,2			; LINEA PROTECION CONTRA BORRADO
	RET

I2CE_2404: 	; EN R17 DIRECION A ESCRIBIR ESCRIBE EL LA EEPROM 16 CARACTERES DE LA RAM
			; DIRECION DE ORIGEN EN RAM 3x00 (YH,YL)
			; LINEA CONTRA BORRADO PORTB,2 A CERO PARA  PROTEGER CONTRA BORRADO
	WDR
	CBI   		PORTB,2			; LINEA PROTECION CONTRA BORRADO
	LDI   		R25, 4			; ESPERA RETARDO
	RCALL 		RETARDO
	LDI			R21, 0B10100000	; BIT LOCALIZACION PERIFERICO 10100000 Y DIRECION, LECTURA O ESCRITURA
	RCALL 		I2C				; ENVIAR LA SE헤L DE START E IDENTIFICACION PERIFERICO EN R21
	RCALL		ACK
	MOV   		R21, R17		; ENVIAR DIRECION A ESCRIBIR
	RCALL 		ENV_BYT
	RCALL		ACK
	LDI			R24, 32			; SOLO ESCRIBE UNA LINEA DE 16 CARACTERES
  	LDI   		YH,0x03        	; direcion alta donde se LEE el texto DE LA RAM
	LDI   		YL,0x00      	; direccion baja donde se LEE el texto DE LA RAM 

I2ECE_2404_A:
	LD   		R21, Y			; ENVIAR VALOR A ESCRIBIR
	RCALL 		ENV_BYT
	RCALL		ENV_ACK
	ADIW  		YL,1 
	DEC			R24
	BRNE		I2ECE_2404_A


	RCALL 		I2CS			; ENVIAR SE헤L DE STOP
	SBI   		PORTB,2			; LINEA PROTECION CONTRA BORRADO
	RET
;*********** RURINA CONTROL I2C////////////////////
; SALIDA PB6 Y PB7

I2C:
	
; ENVIAR LA SE헤L DE START SEGUIDO POR EL BYTE DE IDENTIFICACION DE PERIFERICO
; EL BYTE DE IDENTIFICACION EN R21 CON SE헤L DE LECTURA O ESCRITURA
;  ENVIAMOS LA SE헤L DE START DESPUES DE CONFIGURAR EL MICRO 	

	SBI   PORTC, SCL		; ACTIVAMOS LAS RESISTENCIAS SCL Y SDA
 	SBI   PORTC, SDA 		; Y LAS PONEMOS EN PULL-UP A 1
	SBI   DDRC, SCL			; ACTIVAMOS LAS 2 SALIDAS SCL Y SDA
 	SBI   DDRC, SDA 		; Y LAS PONEMOS EN PULL-UP A 1

	LDI   R25, RI2C			; ESPERA RETARDO
	RCALL RETARDO
	CBI	  PORTC, SDA		; BAJAMOS LINEA SDA 
	LDI   R25, RI2C			; ESPERA RETARDO
	RCALL RETARDO
	CBI	  PORTC, SCL		; BAJAMOS LINEA DEL RELOJ
	LDI   R25, RI2C			; ESPERA RETARDO
	RCALL RETARDO

; **** ENVIAR UN BYTE DE 8 Y LUEGO VERIFICAR ACK EL BYTE EN R21	EN EST
ENV_BYT:
	SBRC  R21, 7
	RCALL BYT1
	SBRS  R21, 7
	RCALL BYT0
	SBRC  R21, 6
	RCALL BYT1
	SBRS  R21, 6
	RCALL BYT0
	SBRC  R21, 5
	RCALL BYT1
	SBRS  R21, 5
	RCALL BYT0
	SBRC  R21, 4
	RCALL BYT1
	SBRS  R21, 4
	RCALL BYT0
	SBRC  R21, 3
	RCALL BYT1
	SBRS  R21, 3
	RCALL BYT0
	SBRC  R21, 2
	RCALL BYT1
	SBRS  R21, 2
	RCALL BYT0
	SBRC  R21, 1
	RCALL BYT1
	SBRS  R21, 1
	RCALL BYT0
	SBRC  R21, 0
	RCALL BYT1
	SBRS  R21, 0
	RCALL BYT0
	RET

REC_BYT: ; EL RESULTADO EN R19 QUE ES REC_DATOS
	SER   REC_DATOS			; TODO A UNO EL REGISTRO PARA ALMACENAR LOS DATOS
	LDI   R25, RI2C			; ESPERA RETARDO
	RCALL RETARDO
	CBI   DDRC, SDA			; LINEA SDA COMO ENTRADA PARA RECIBIR DATOS
	LDI   R25, RI2C			; ESPERA RETARDO
	RCALL RETARDO
	SBI   PORTC, SCL		; ACTIVA LA SE헤L DE RELOJ
	LDI   R25, RI2C			; ESPERA RETARDO
	RCALL RETARDO
	SBIS  PINC, SDA			; SI LA SE헤L ES 1 NO EJECUTA LA SIGUIENTE INSTRU.
	ANDI  REC_DATOS, 127	; CON 01111111 = 127 ANULA BIT 7
	RCALL REC_BYTA	
	SBIS  PINC, SDA			; SI LA SE헤L ES 1 NO EJECUTA LA SIGUIENTE INSTRU.
	ANDI  REC_DATOS, 191	; CON 10111111 = 191 ANULA BIT 6
	RCALL REC_BYTA	
	SBIS  PINC, SDA			; SI LA SE헤L ES 1 NO EJECUTA LA SIGUIENTE INSTRU.
	ANDI  REC_DATOS, 223	; CON 11011111 = 223 ANULA BIT 5
	RCALL REC_BYTA	
	SBIS  PINC, SDA			; SI LA SE헤L ES 1 NO EJECUTA LA SIGUIENTE INSTRU.
	ANDI  REC_DATOS, 239	; CON 11101111 = 239 ANULA BIT 4
	RCALL REC_BYTA	
	SBIS  PINC, SDA			; SI LA SE헤L ES 1 NO EJECUTA LA SIGUIENTE INSTRU.
	ANDI  REC_DATOS, 247	; CON 11110111 = 247 ANULA BIT 3
	RCALL REC_BYTA	
	SBIS  PINC, SDA			; SI LA SE헤L ES 1 NO EJECUTA LA SIGUIENTE INSTRU.
	ANDI  REC_DATOS, 251	; CON 11111011 = 251 ANULA BIT 2
	RCALL REC_BYTA	
	SBIS  PINC, SDA			; SI LA SE헤L ES 1 NO EJECUTA LA SIGUIENTE INSTRU.
	ANDI  REC_DATOS, 253	; CON 11111101 = 253 ANULA BIT 1
	RCALL REC_BYTA	
	SBIS  PINC, SDA			; SI LA SE헤L ES 1 NO EJECUTA LA SIGUIENTE INSTRU.
	ANDI  REC_DATOS, 254	; CON 11111110 = 254 ANULA BIT 0
	CBI   PORTC, SCL		; DESACTIVA LA SE헤L DE RELOJ
	LDI   R25, RI2C			; ESPERA RETARDO
	RCALL RETARDO
	RET

REC_BYTA:
	LDI   R25, RI2C			; ESPERA RETARDO
	RCALL RETARDO
	CBI   PORTC, SCL		; DESACTIVA LA SE헤L DE RELOJ
	LDI   R25, RI2C			; ESPERA RETARDO
	RCALL RETARDO
	SBI   PORTC, SCL		; ACTIVA LA SE헤L DE RELOJ
	LDI   R25, RI2C			; ESPERA RETARDO
	RCALL RETARDO
	RET

; SE헤L ACK	
ACK:
	CBI   DDRC, SDA			; LINEA SDA COMO ENTRADA PARA ACK
	SBI	  PORTC, SDA		; ACTIVAR RESISTENCIA DE CARGA AL POSITIVO
	LDI   R16, 78			; CARGA UNA N EN EL REGISTRO R16 Y
	STS   $008A, R16		; LA PONE  EN RAM
	LDI   R16, 83			; CARGA UNA S DE NO
	LDI   R25, RI2C			; ESPERA RETARDO
	RCALL RETARDO
	SBI   PORTC, SCL		; ACTIVA LA SE헤L DE RELOJ
	LDI   R25, RI2C			; ESPERA RETARDO
	RCALL RETARDO
	SBIS  PINC, SDA			; SI LA SE헤L ES 1 NO EJECUTA LA SIGUIENTE INSTRU.
	STS   $008A, R16		; PONE UNA N EN RAM
	CBI   PORTC, SCL		; PONE A CERO LA SE헤L DEL RELOJ
	LDI   R25, RI2C			; ESPERA RETARDO
	RCALL RETARDO
	SBI   DDRC, SDA			; LINEA SDA COMO SALIDA
	CBI   PORTC,SDA			; CON VALOR 0
	RET

ENV_ACK: ; EL MASTER PONE A 1 LA LINEA SDA
	SBI   DDRC, SDA			; LINEA SDA COMO SALIDA
	CBI   PORTC,SDA			; CON VALOR 0
	LDI   R25, RI2C			; ESPERA RETARDO
	RCALL RETARDO
	SBI   PORTC, SCL		; ACTIVA LA SE헤L DE RELOJ
	LDI   R25, RI2C			; ESPERA RETARDO
	RCALL RETARDO
	CBI   PORTC, SCL		; PONE A CERO LA SE헤L DEL RELOJ
	LDI   R25, RI2C			; ESPERA RETARDO
	RCALL RETARDO
	CBI	  PORTC, SDA		; LINEA SDA COMO ENTRADA
	RET

BYT0:
	CBI	  PORTC, SDA		; PONE A CERO LA LINEA SDA
	RJMP  BYT1A
BYT1:
	SBI   PORTC, SDA		; PONE A UNO LA LINEA SDA	
BYT1A:	
	WDR
	LDI   R25, RI2C			; ESPERA RETARDO
	RCALL RETARDO
	SBI   PORTC, SCL		; ACTIVA LA SE헤L DE RELOJ
	LDI   R25, RI2C			; ESPERA RETARDO
	RCALL RETARDO
	CBI   PORTC, SCL		; PONE A CERO LA SE헤L DEL RELOJ
	LDI   R25, RI2C			; ESPERA RETARDO
	RCALL RETARDO
	RET

; CONDICION DE STOP PARA I2C

I2CS:
	SBI   DDRC, SCL			; ACTIVAMOS LAS 2 SALIDAS SCL Y SDA
 	SBI   DDRC, SDA 		; Y LAS PONEMOS EN PULL-UP A 1
	LDI   R25, RI2C
	RCALL RETARDO
 	CBI   PORTC, SDA 		; LINEA SDA A CERO
	LDI   R25, RI2C			; ESPERA RETARDO
	RCALL RETARDO
	SBI   PORTC, SCL		; ACTIVAMOS LAS RESISTENCIAS SCL Y SDA
	LDI   R25, RI2C
	RCALL RETARDO
	SBI	  PORTC, SDA		; SUBIMOS LINEA SDA
	LDI   R25, RI2C			; ESPERA RETARDO
	RCALL RETARDO			; LAS DOS LINAS QUEDAN A 1
	RET
