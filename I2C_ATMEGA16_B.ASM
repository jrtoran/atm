;                PROTOCOLO I2C INTERNO DEL AT MEGA 16
		; ------------------LOS PINES SCL Y SDA SE HAN DE CONFIGURAR COMO SALIDA -------------------------
		; RUTINA PARA LA LECTURA DEL CONVERTIDOR ANALOGICO DIGITAL PCF8591
		; EN R19 CONFIGURACION DEL PCF8591 DE 0 AL 7 CONFIGURADO CON A0 A1 A2 OJO MULTIPLICAR POR DOS
		; EN R18 LINEA DE ENTRADA A LEER Y CONFIGURACION DEL PERIFERICO
		; EN R26 NUMERO DE LECTURAS MAX. 250
		; EN R24 EL RESULTADO O EL VALOR A GRABAR
		; ESTA RUTINA NO VERIFICA QUE EL CONVERTIDOR RESPONDA PUEDE NO ESTAR PRESENTE
ERROR_1_B:						; ERROR NO HAY PERIFERICO
	LDI				R24, 255	; VALOR CUANDO NO HAY PERIFERICO ERROR
	RET

PCF_B:
	CLR				R24
	CLR				R1
	CBI				PORTC, 1	; PONE EL PUERTO C PORT 1 COMO ENTRADA DE DATOS
	CBI				DDRC, 1		; PONE EL PUERTO C PORT 1 COMO ENTRADA DE DATOS
	CBI				PORTC, 0	; PONE EL PUERTO C PORT 1 COMO ENTRADA DE DATOS
	CBI				DDRC, 0		; PONE EL PUERTO C PORT 1 COMO ENTRADA DE DATOS
	RCALL			I2C_ATMEGA_B
	LDI				R16, 00
	OUT				TWAR, R16
	OUT				TWBR, R16
	OUT				TWDR, R16
	OUT				TWSR, R16
	SBI				PORTC, 1	; PONE EL PUERTO C PORT 1 COMO SALIDA DE DATOS
	SBI				DDRC, 1		; PONE EL PUERTO C PORT 1 COMO SALIDA DE DATOS
	SBI				PORTC, 0	; PONE EL PUERTO C PORT 1 COMO ENTRADA DE DATOS
	SBI				DDRC, 0		; PONE EL PUERTO C PORT 1 COMO ENTRADA DE DATOS
	RET


I2C_ATMEGA_B:
; INICIALIZACION DEL PERIFERICO A 400KHZ

	LDI		R16, 2
	OUT		TWBR, R16		; DIVISOR DE FRECUENCIA
	LDI		R16, (1<<TWPS1) | (1<<TWPS0)
	OUT		TWSR, R16		; REGISTRO DE CONTROL

; CONDICION DE START
	LDI		R16, (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)
	OUT		TWCR, R16

ESPERA1_B: ; ESPERA EL ENVIO DE LA CONDICION START
	IN		R16, TWCR
	SBRS	R16, TWINT
	RJMP	ESPERA1_B
; CHEQUEAR SI HA HABIDO ERROR EN EL ENVIO DE LA ORDEN START
;	IN		R16, TWSR
;	ANDI	R16, 0xF8
;	CPI		R16, I2C_START
;	BRNE	ERROR_1_B	;  ****AQUI HAY UN ESCESO DE SALTO SE PONE UN RET DIRECTO
; CARGA EN TWDR LA DIRECION DEL PERIFERICO A LEER EN OPCION ESCRITURA W
	LDI		R16, PCF8591_T + W
LSL R19
ADD R16, R19


	OUT		TWDR, R16
	LDI		R16, (1<<TWINT) | (1<<TWEN)
	OUT		TWCR, R16
; ESPERA EL ENVIO DE LA DIRECION DEL PERIFERICO
ESPERA2_B:
	IN		R16, TWCR
	SBRS	R16, TWINT
	RJMP	ESPERA2_B
; CHEQUEAR SI HA HABIDO ERROR EN EL ENVIO DE LA DIRECION DEL PERIFERICO
; SI NO HAY MODULO POS YA ESTA FIN
	IN		R16, TWSR
	ANDI	R16, 0xF8
	CPI		R16, MT_SLA_ACK
	BRNE	ERROR_1_B
; CARGA EL DATO EN EL REGISTRO TWDR EL VALOR DEL PUERTO A LEER EN R24 


	MOV		R16, R18
	OUT		TWDR, R16
	LDI		R16, (1<<TWINT) | (1<<TWEN)
	OUT		TWCR, r16
; ESPERA EL ENVIO DEL DATO AL PERIFERICO
ESPERA3_B:
	IN		R16, TWCR
	SBRS	R16, TWINT
	RJMP	ESPERA3_B
; CHEQUEA EL VALOR DEL REGISTRO POR SI HUBIERA ERROR
;	IN		R16, TWSR
;	ANDI	R16, 0xF8
;	CPI		R16, MT_DATA_ACK
;	BRNE	ERROR_B
; TRANSMITIR SEÑAL DE STOP
	LDI		R16, (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)
	OUT		TWCR, R16
	NOP
	NOP

I2C_ATMEGA_1_B:  ;  LEER EL DATO DE TENSION EN LA ENTRADA SELECIONADA
; INICIALIZACION A 100KhZ

	LDI		R16, 2
	OUT		TWBR, R16		; DIVISOR DE FRECUENCIA
	LDI		R16, (1<<TWPS1) | (1<<TWPS0)
	OUT		TWSR, R16		; REGISTRO DE CONTROL

; CONDICION DE START
	LDI		R16, (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)
	OUT		TWCR, r16

ESPERA4_B: ; ESPERA EL ENVIO DE LA CONDICION START *** RE_START
	IN		R16, TWCR
	SBRS	R16, TWINT
	RJMP	ESPERA4_B
; CHEQUEAR SI HA HABIDO ERROR EN EL ENVIO DE LA ORDEN START

;	IN		R16, TWSR
;	ANDI	R16, 0xF8
;	CPI		R16, REP_START
;	BRNE	ERROR_B

; CARGA EN TWDR LA DIRECION DEL PERIFERICO A LEER EN OPCION LECTURA
	LDI		R16, PCF8591_T + R
;LSL R19
ADD R16, R19
	OUT		TWDR, R16
	LDI		R16, (1<<TWINT) | (1<<TWEN)
	OUT		TWCR, R16
; ESPERA EL ENVIO DE LA DIRECION DEL PERIFERICO
ESPERA5_B:
	IN		R16, TWCR
	SBRS	R16, TWINT
	RJMP	ESPERA5_B
; CHEQUEAR SI HA HABIDO ERROR EN EL ENVIO DE LA DIRECION DEL PERIFERICO
;	IN		R16, TWSR
;	ANDI	R16, 0xF8
;	CPI		R16, MR_SLA_ACK
;	BRNE	ERROR_B

;RECIBIR EL DATO

	LDI		R16, (1<<TWINT) | (1<<TWEN)
	OUT		TWCR, R16
; ESPERA EL ENVIO DEL VALOR 
ESPERA6_B:
	IN		R16, TWCR
	SBRS	R16, TWINT
	RJMP	ESPERA6_B
; CHEQUEAR SI HA HABIDO ERROR
;	IN		R16, TWSR
;	ANDI	R16, 0xF8
;	CPI		R16, MR_DATA_NACK
;	BRNE	ERROR_B
	IN		R17, TWDR
; TRANSMITIR SEÑAL DE STOP
	LDI		R16, (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)
	OUT		TWCR, R16


	DEC				R26					; RESTA UNA MEDICION
	BREQ			I2C_ATMEGA_2_B		; SI A LLEGADO A CERO SALTA A PCF2 Y TERMINA
	ADC				R1, R17
	BRCC			I2C_ATMEGA_1_B				; SI NO HAY DESBIRDAMIENTO SALTA A PCF1
	INC				R24
	WDR
	RJMP			I2C_ATMEGA_1_B
I2C_ATMEGA_2_B:

	RET
ERROR_B:
	RET

