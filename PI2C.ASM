; RUTINA I2C
; PASOS 
;1º	TWBR		; FACTOR DE DIVISION PARA LA FRECUENCIA DE ENVIO EN CASO DE SER MASTER
;						((F_CPU/SCL_CLOCK)-16)/2 (8.000.000/100.000)-16)/2 = 32

;	TWAR		; direcion del modulo esclavo, bit 1 a 7
				; bit 0 activa la posibilidad de una deteccion el el bus i2c
;	TWCR		; REGISTRO PRINCIPAL DE CONTROL

;					TWINT TWEA TWSTA TWSTO TWWC TWEN   –   TWIE

;						TWINT				ACTIVAR INTERRUPCION
;						TWEA				ACTIVAR ACK RESPUESTA DEL MODULO ESCLAVO
;						TWSTA				CHEQUEAR CONCION DE I2C_1A BUS LIBRE
;						TWSTO				GENERAR CONDICION DE STOP
;						TWWC				DETECTAR COLISION DE DATOS 
;						TWEN				ACTIVA LAS FUNCIONES DE MODULO I2C
;						TWIE				ACTIVA LA INTERRUPCION


;	TWDR				CONTIENE EL DATO A ENVIAR O EL DATO RECIBIDO

;	TWSR				REGISTRO DE ESTADO
; RUTINA I2C CONFIGURAR A 100Khz, PREESCALA = 0   ( TWPS1 Y TWPS0 ) PAGINA 183 DEL REGISTRO DE ESTADO "TWSR"
; EL REGISTRO DE ESTADO "TWSR" QUEDA CONFIGURADO EN SU FORMA DE ORIGEN 0b11111000
; EL DIVISOR A 32  "TWBR" 

PI2C: 									; LEER CONVERTIDOR ADC
; AJUSTAR LA FRECUENCIA DEL BUS A 100KHz				F Khz = 8MHz/(16+2*32)  32 ES EL VALOR A COLOCAR PARA 100KHz
	LDI			R16, 32					; CON UNA FRACUENCIA DEL MICRO DE 8Mh SE QUEDA EN 100Khz
	OUT			TWBR, R16
	IN			R16, TWSR
	ANDI		R16, 0xFC
	OUT			TWSR, R16				; LIMPIAR EL REISTRO DE ESTADO


I2CL_8591:		; CONFIGURAR PERIFERICO
	WDR
	RCALL		I2C_1A					; ENVIAR START
	RCALL		ESPERA					; RETARDO
	LDI			R16, pcf8571 + W		; DIRECION + ORDEN DE ESCRITURA ULTIMO BITE UN 0 ESCRIBIR 		9E
	RCALL		I2C_2A					; ENVIAR LA DIRECION DEL PERIFERICO  0B10011110		9E
	RCALL		ESPERA					; RETARDO
	LDI			R16, 1					; DATO A ENVIAR, DIRECION Y CANAL A LEER
	RCALL		I2C_2A					; ENVIAR CONFIGURACION Y CANAL A LEER 0-1-2-3		1
	RCALL		ESPERA					; RETARDO

I2CL_8591A:		; LEER PERIFERICO VALOR DEL CANAL SELECIONADO
	RCALL		I2C_1A					; ENVIAR SATART
	RCALL		ESPERA					; RETARDO
	LDI			R16, pcf8571 + R		; DIRECION + ORDEN DE ESCRITURA ULTIMO BITE UN 1 LEER	 		9F
	RCALL		I2C_2A					; ENVIAR LA DIRECION DEL PERIFERICO  0B10011110		9E
	RCALL		ESPERA					; RETARDO
	RCALL		I2C_5A					; LEER EL DATO EL RESULTADO EN R24								XX
	RCALL		ESPERA					; RETARDO
	RCALL		I2C_6A					; ENVIAR SEÑAL SE STOP
	RCALL		ESPERA					; RETARDO
	IN			REC_DATOS, ADCH
	RET

EEPROM_GRA:						;24LC256 
	SER			R16
	OUT			TWSR, R16				; LIMPIAR EL REISTRO DE ESTADO
	LDI			R16, 32					; CON UNA FRACUENCIA DEL MICRO DE 8Mh
	OUT			TWBR, R16				; PONER EL I2C A 100Khz
	RCALL		I2C_1A					; ENVIAR I2C_1A
	RCALL		ESPERA
	LDI			R16, EEPROM + W			; BIT DE CONTROL DIRECION + ORDEN DE ESCRITURA ULTIMO BITE UN 0 ESCRIBIR 	9E
	RCALL		I2C_2A					; ENVIAR LA DIRECION DEL PERIFERICO  0B10011110		9E
	RCALL		ESPERA					; RETARDO
; POSICION DE LA MEMORIA DOS BITES PRIMERO EL ALTO MAX 7 BIT Y DESPUES EL BAJO
	LDI			R16, 1					; DATO A ENVIAR CARGAR EN TWDR
	RCALL		I2C_3A					; ENVIAR CONFIGURACION Y CANAL A LEER 0-1-2-3		1
	RCALL		ESPERA					; RETARDO
	LDI			R16, 5					; DATO A ENVIAR CARGAR EN TWDR
	RCALL		I2C_3A					; ENVIAR CONFIGURACION Y CANAL A LEER 0-1-2-3		1
; VALORES A GRABAR EN LA POSICION PREDEFINIDA
	RCALL		ESPERA					; RETARDO
	LDI			R16, 128
	RCALL		I2C_4A
	RCALL		ESPERA					; RETARDO
	LDI			R16, 128
	RCALL		I2C_4A
	RCALL		ESPERA					; RETARDO
	RCALL		I2C_6A					; ENVIAR SEÑAL SE STOP
	RCALL		ESPERA					; RETARDO
	RET

EEPROM_READ:						;24LC256 

	LDI			R16, 32					; CON UNA FRACUENCIA DEL MICRO DE 8Mh
	OUT			TWBR, R16
	SER			R16
	OUT			TWSR, R16

	RCALL		I2C_1A					; ENVIAR I2C_1A
	LDI			R16, EEPROM + W			; BIT DE CONTROL DIRECION + ORDEN DE ESCRITURA ULTIMO BITE UN 0 ESCRIBIR 	9E
	RCALL		I2C_2A					; ENVIAR LA DIRECION DEL PERIFERICO  0B10011110		9E
; POSICION DE LA MEMORIA DOS BITES PRIMERO EL ALTO MAX 7 BIT Y DESPUES EL BAJO
	LDI			R16, 2					; DATO A ENVIAR BIT ALTO
	RCALL		I2C_3A					; ENVIAR CONFIGURACION Y CANAL A LEER 0-1-2-3		1
	LDI			R16, 4					; DATO A ENVIAR BIT BAJO
	RCALL		I2C_3A					; ENVIAR CONFIGURACION Y CANAL A LEER 0-1-2-3		1
	RCALL		I2C_1A					; ENVIAR I2C_1A
	LDI			R16, EEPROM + R			; BIT DE CONTROL DIRECION + ORDEN DE ESCRITURA ULTIMO BITE UN 0 ESCRIBIR 	9E
	RCALL		I2C_2A					; ENVIAR LA DIRECION DEL PERIFERICO  0B10011110		9E
	RCALL		I2C_5A					; LEER EL DATO EL RESULTADO EN R24	
	RCALL		I2C_6A					; ENVIAR SEÑAL SE STOP
	RET

I2C_1A:
; ENVIAR CONDICION DE INICIO "SART"  
	LDI			R16, (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) 
	OUT			TWCR, R16
	RET


I2C_2A:
; CARGA LA DIRRECION DEL PERIFERICO A ENVIAR EN ESTE CASO LA DIRECION A LEER MAS LA ORDEN READ/WRITE
; EN R16 LA DIRECION A LEER
	OUT			TWDR, R16
	LDI			R16, (1<<TWINT)|(1<<TWEN) ; ACTIVAR EL ENVIO DE LA DIRECION O DATO ALMACENADO EN TWDR
	OUT			TWCR, R16
	RET

I2C_3A:
; CARGAR DATO Y ENVIAR EN EL CASO DE ADC LA POSICION DEL CANAL A LEER EL 0-1-2-3  ENVIA UN					 1

	OUT			TWDR, R16
	LDI			R16, (1<<TWINT) | (1<<TWEN)	;ACTIVAR EL ENVIO
	OUT			TWCR, R16
	RET

I2C_4A: ; ENVIAR ORDEN DE LECTURA SE ENVIA LA DIRECIION + R

	OUT			TWDR, R16
	LDI			R16, (1<<TWINT) | (1<<TWEN) ; ACTIVAR EL ENVIO DE LA DIRECION O DATO ALMACENADO EN TWDR
	OUT			TWCR, R16
	RET

I2C_5A: ; RECIBIR EL DATO DEL PERIFERICO

	LDI			R16, (1<<TWINT) | (1<<TWEA) | (1<<TWEN) 
	OUT			TWCR, R16
	RCALL		ESPERA
	IN			R24, TWDR					; LEER EL DATO
	NOP
	RET

ESPERA:
	LDI			R25, 20
	RCALL		RETARDO
	RET

I2C_6A:
;ENVIAR SEÑAL DE STOP
	LDI			R16, (1<<TWINT) | (1<<TWEN) | (1 << TWSTO) 
	OUT			TWCR, R16
	RET

